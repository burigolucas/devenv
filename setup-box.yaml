---
- name: setup linux development machine
  hosts: localhost

  # roles:
  # - role: danielrolls.nix
  #   become: true

  tasks:
    - name: Install useful CLIs/tools
      ansible.builtin.package:
        name:
        - jq
        - yq
        - wl-clipboard
        - ptyxis
        state: present
      become: true
      tags: clis

    - name: Install useful apps
      ansible.builtin.package:
        name:
        - chromium
        state: present
      become: true
      tags: apps

    - name: Install bash addons
      ansible.builtin.package:
        name:
        - bash-completion
        state: present
      become: true
      tags: bash

    - name: Install npm
      ansible.builtin.package:
        name: nodejs-npm
        state: present
      become: true
      tags: nodejs

    - name: Install unison
      ansible.builtin.package:
        name: unison-gtk
        state: present
      become: true
      tags: unison

    - name: Install vim
      ansible.builtin.package:
        name: vim
        state: present
      become: true
      tags: vim

    - name: Configure vim
      ansible.builtin.copy:
        src: vimrc
        dest: ~/.vimrc
      tags: vim

    - name: Install VSCodium repo
      become: true
      ansible.builtin.yum_repository:
        name: download.vscodium.com
        description: VS Codium
        file: vscodium
        baseurl: '{{ mirror }}'
        gpgkey: '{{ gpgkey }}'
        gpgcheck: '{{ gpgcheck }}'
      vars:
        mirror: "https://download.vscodium.com/rpms/"
        gpgcheck: true
        gpgkey: https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/-/raw/master/pub.gpg
      tags: codium

    - name: Install VSCodium
      become: true
      ansible.builtin.dnf:
        name: codium
        state: present
      tags: codium

    - name: Install Codium extensions
      ansible.builtin.shell: |
        cat codium-extensions | xargs -n1 codium --install-extension
      tags: codium, codium-extensions

    - name: Install VS Code repo
      become: true
      ansible.builtin.yum_repository:
        name: code
        description: Visual Studio Code
        file: vscode
        baseurl: '{{ visual_studio_code_mirror }}/yumrepos/vscode'
        gpgkey: '{{ visual_studio_code_mirror }}/keys/microsoft.asc'
        gpgcheck: '{{ visual_studio_code_gpgcheck }}'
      vars:
        visual_studio_code_mirror: "https://packages.microsoft.com"
        visual_studio_code_gpgcheck: true
      tags: vs-code

    - name: Install VS Code
      become: true
      ansible.builtin.dnf:
        name: code
        state: present
      tags: vs-code

    - name: Install VS Code extensions
      ansible.builtin.shell: |
        bash install_vs-code-extensions.sh
      tags: vs-code

    - name: Spotify
      community.general.flatpak:
        name: com.spotify.Client
        state: present
      tags: spotify

    - name: Google Chrome
      become: true
      ansible.builtin.dnf:
        name: google-chrome-stable
        state: present
      tags: chrome

    - name: Podman
      ansible.builtin.package:
        name:
          - podman-compose
          - podman-remote
          - podman-docker
        state: present
      become: true
      tags: podman

    - name: Podman Desktop
      community.general.flatpak:
        name: io.podman_desktop.PodmanDesktop
        state: present
      tags: podman

    - name: Docker
      ansible.builtin.package:
        name:
          - docker-cli
          - docker-buildx
          - docker-compose
          - docker-compose-switch
        state: absent
      become: true
      tags: docker

    - name: Virtual Machine Manager
      ansible.builtin.package:
        name:
          - virt-manager
        state: present
      become: true
      tags: virt-manager


# # Testcontainers and Quarkus requires the docker daemon. In order to obtaint the docker API on a Unix socket, 
# # one can create a service for podman and enable it on the user space as below (see https://quarkus.io/blog/quarkus-devservices-testcontainers-podman/)
# systemctl --user enable podman.socket --now
# # Following setting allow to pull images from docker.io automatically when using the short image name
# short-name-mode="disabled" configuration property of Podman in /etc/containers/registries.conf.

    - name: Java tools
      ansible.builtin.package:
        name:
        - java-latest-openjdk-devel
        - maven
        state: present
      become: true
      tags: java

    - name: Android tools
      ansible.builtin.package:
        name:
        - android-tools
        state: present
      become: true
      tags: android

    - name: Install Android Studio
      community.general.flatpak:
        name:
          - com.google.AndroidStudio
        state: present
      tags: android

    - name: Install tmux
      ansible.builtin.package:
        name: tmux
        state: present
      become: true
      tags: tmux
      
    - name: Configure tmux
      ansible.builtin.shell: |
        git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
      args:  
        creates: ~/.tmux/plugins/tpm
      tags: tmux

    - name: Copy tmux config file
      ansible.builtin.copy:
        src: tmux.conf
        dest: ~/.tmux.conf
      tags: tmux

    - name: Configure git
      ansible.builtin.shell: |
        git config --global init.defaultBranch main
        git config --global user.email "burigolucas@gmail.com"
        git config --global user.name "Lucas Burigo"
      args:  
        creates: ~/.gitconfig
      tags: git
      
    - name: Python
      ansible.builtin.package:
        name: 
          - python3-virtualenv
          - python3-setuptools
          - python3-devel
          - python3-pip
        state: present
      become: true
      tags: python

    - name: Install bat
      ansible.builtin.package:
        name: bat
        state: present
      become: true
      tags: bat

    - name: Install ansible-navigator
      ansible.builtin.pip:
        name: ansible-navigator
        state: present
      #become: true
      tags: ansible-navigator

#    - name: Install the 'Development tools' package group
#      ansible.builtin.dnf:
#        name: '@Development tools'
#        state: present
#      become: true
#      tags: dev-tools

    - name: Install dev tools
      ansible.builtin.package:
        name:
          - make
          - cmake
          - clang
          - gcc
          - gcc-c++
          - golang
          #- ninja-build # required for flutter linux desktop
          #- gtk3-devel  # required for flutter linux desktop
        state: present
      become: true
      tags: dev-tools

    - name: Install meld
      ansible.builtin.package:
        name: meld
        state: present
      become: true
      tags: meld

    - name: Install atuin 
      ansible.builtin.shell: curl --proto '=https' --tlsv1.2 -sSf https://setup.atuin.sh | sh
      args:
        creates: ~/.atuin/bin/atuin
      tags: atuin

    - name: Insert a line after a specific pattern
      lineinfile:
        path: ~/.bashrc
        line: "export PATH=~/.atuin/bin:$PATH"
        insertbefore: "^eval .*atuin init bash.*"
      tags: atuin

    - name: Initialize atuin and import history
      ansible.builtin.shell: ~/.atuin/bin/atuin init bash && ~/.atuin/bin/atuin import auto
      args:
        creates: ~/.config/atuin/config.toml
      tags: atuin

    - name: Configure atuin
      ansible.builtin.lineinfile:
        path: ~/.config/atuin/config.toml
        regexp: '^[#]?filter_mode_shell_up_key_binding'
        line: 'filter_mode_shell_up_key_binding = "directory"'
      tags: atuin

    - name: Configure atuin
      ansible.builtin.lineinfile:
        path: ~/.config/atuin/config.toml
        regexp: '^[#]?search_mode_shell_up_key_binding'
        line: 'search_mode_shell_up_key_binding = "prefix"'
      tags: atuin

    - name: Configure atuin
      ansible.builtin.lineinfile:
        path: ~/.config/atuin/config.toml
        regexp: '^[#]?style ='
        line: 'style = "auto"'
      tags: atuin

    - name: Configure atuin
      ansible.builtin.lineinfile:
        path: ~/.config/atuin/config.toml
        regexp: '^[#]?inline_height'
        line: 'inline_height = 20'
      tags: atuin

    - name: Install homebrew
      ansible.builtin.shell: |
        NONINTERACTIVE=1 bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        echo >> /home/$USERNAME/.bashrc
        echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> /home/$USERNAME/.bashrc
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
      args:  
        creates: /home/linuxbrew/.linuxbrew/bin
      become: false # need sudo to install brew, but should not run as root
      tags: homebrew

    - name: do facts module to get latest information
      setup:
      tags: homebrew

    # - name: Install kubectl and krew
    #   ansible.builtin.shell: |
    #     TMP_DIR=$(mktemp -d)
    #     cd ${TMP_DIR}
    #     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    #     curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
    #     echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
    #     install kubectl ~/.local/bin/kubectl
    #     ( set -x; cd "$(mktemp -d)" && \
    #       OS="$(uname | tr '[:upper:]' '[:lower:]')" && \
    #       ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" && \
    #       KREW="krew-${OS}_${ARCH}" && \
    #       curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" && \
    #       tar zxvf "${KREW}.tar.gz" && \
    #      ./"${KREW}" install krew \
    #     )
    #     echo 'export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"' >> ~/.bashrc
    #   args:
    #     creates: ~/.local/bin/kubectl 
    #   tags: kubernetes

    - community.general.homebrew:
        name:
        - helm
        - kubectl
        - krew
        - derailed/k9s/k9s
        - tektoncd-cli
        state: latest
        update_homebrew: false
      tags: kubernetes

    - name: Install minikube
      ansible.builtin.shell: |
        which curl
        which rpm
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-latest.x86_64.rpm 
        rpm -Uvh --nodigest --nofiledigest minikube-latest.x86_64.rpm 
      args:
        creates: /usr/bin/minikube
      become: true
      tags: minikube

    - name: Setup env and aliases
      ansible.builtin.blockinfile:
        path: ~/.bashrc
        block: |
          export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
          source <(kubectl completion bash)
          source <(helm completion bash)
          source <(minikube completion bash)
          alias k="kubectl"
          alias kctx='f() { [ "$1" ] && kubectl config use-context $1 || kubectl config current-context ; } ; f'
          alias kns='f() { [ "$1" ] && kubectl config set-context --current --namespace $1 || kubectl config view --minify | grep namespace | cut -d" " -f6 ; } ; f'
          alias konfig='kubectl konfig'
          
          # enable completion for the alias
          complete -F __start_kubectl k
          EDITOR=vim
      tags: bash

    - name: do facts module to get latest information
      setup:
      tags: kubernetes

    - name: Install kubectl plugins
      ansible.builtin.shell: |
        kubectl krew install ctx
        kubectl krew install ns
        kubectl krew install resource-capacity
        kubectl krew install view-secret
        kubectl krew install df-pv
        kubectl krew install konfig
      tags: kubernetes,krew

    - name: Install starship
      ansible.builtin.shell: |
         curl -sS https://starship.rs/install.sh | sh -s -- -b ~/.local/bin -y
         cp starship.toml ~/.config/starship.toml
         echo 'eval "$(starship init bash)"' >> ~/.bashrc
      args:
        creates: ~/.local/bin/starship 
      tags: starship

    - name: do facts module to get latest information
      setup:
      tags: starship

    # - name: Install wuzz
    #   ansible.builtin.shell: |
    #     got install github.com/asciimoo/wuzz@latest
    #   args:  
    #     creates: ~/go/bin/wuzz
    #   tags: wuzz
        
    # - name: Install btop
    #   ansible.builtin.package:
    #     name: btop 
    #     state: present
    #   become: true
    #   tags: btop
      
    # - name: Install oh-my-bash
    #   ansible.builtin.shell: bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)"
    #   args:  
    #     creates: ~/.oh-my-bash
    #   tags: oh-my-bash

    # - name: Install ble.sh
    #   ansible.builtin.shell: |
    #     curl -L https://github.com/akinomyoga/ble.sh/releases/download/nightly/ble-nightly.tar.xz | tar xJf -
    #     bash ble-nightly/ble.sh --install ~/.local/share
    #     echo 'source ~/.local/share/blesh/ble.sh' >> ~/.bashrc
    #     rm -rf ble-nightly
    #   args:  
    #     creates: ~/.local/share/blesh/ble.sh

    # - name: Install dasel
    #   ansible.builtin.shell: curl -sSLf "$(curl -sSLf https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_amd64 | grep -v .gz | cut -d\" -f 4)" -L -o dasel && chmod +x dasel && mv ./dasel /usr/local/bin/dasel
    #   args:
    #     creates: /usr/local/bin/dasel
    #   become: true
    #   tags: dasel

    # - name: Install rust
    #   ansible.builtin.shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    #   args:
    #     creates: ~/.cargo/bin/rustup
    #   tags: rust

    # - name: Install ripgrep
    #   ansible.builtin.package:
    #     name: ripgrep
    #     state: present
    #   become: true
    #   tags: ripgrep

    # - name: Install neovim
    #   ansible.builtin.shell: |
    #     wget https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz
    #     wget https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz.sha256sum
    #     echo "$(cat nvim-linux64.tar.gz.sha256sum)" | sha256sum --check
    #     tar -zxvf nvim-linux64.tar.gz
    #     mv nvim-linux64 ~/.local/share/nvim
    #     rm nvim-linux64.tar.gz
    #     rm nvim-linux64.tar.gz.sha256sum
    #     echo 'export PATH=$HOME/.local/share/nvim/bin:$PATH' >> ~/.bashrc
    #   args:
    #     creates: ~/.local/share/nvim/bin/nvim
    #   tags: vim

    # # THIS ONLY WORKS AFTER REFRESH THE SHELL
    # - name: Install lvim
    #   ansible.builtin.shell: |
    #     which make
    #     which git
    #     which make
    #     which pip
    #     which npm
    #     which node
    #     which cargo
    #     which rg
    #     yes | curl -s https://raw.githubusercontent.com/LunarVim/LunarVim/release-1.4/neovim-0.9/utils/installer/install.sh |  LV_BRANCH=release-1.4/neovim-0.9 bash 
    #   args:
    #     creates: ~/.local/bin/lvim
    #   tags: lvim

    # - name: Copy lvim config file
    #   ansible.builtin.copy:
    #     src: config.lua
    #     dest: ~/.config/lvim/config.lua
    #   tags: lvim-config

    # - name: Uninstall lvim
    #   ansible.builtin.shell: bash ~/.local/share/lunarvim/lvim/utils/installer/uninstall.sh 
    #   when: "'cleanup-lvim' in ansible_run_tags"
    #   tags: cleanup-lvim

    # - name: Install nerd fonts
    #   ansible.builtin.shell: |
    #     ./install_nerdfonts.sh
    #   args:
    #     creates: ~/.local/share/fonts/NerdFonts 
    #   tags: fonts


    # - name: Install lazygit
    #   ansible.builtin.shell: |
    #     TMP_DIR=$(mktemp -d)
    #     cd ${TMP_DIR}
    #     curl -LO https://github.com/jesseduffield/lazygit/releases/download/v0.43.1/lazygit_0.43.1_Linux_x86_64.tar.gz
    #     tar -zxf lazygit_0.43.1_Linux_x86_64.tar.gz
    #     mv lazygit ~/.local/bin
    #   args:
    #     creates: ~/.local/bin/lazygit 
    #   tags: lazygit

    # - name: Install lazydocker
    #   ansible.builtin.shell: |
    #     TMP_DIR=$(mktemp -d)
    #     cd ${TMP_DIR}
    #     curl -LO https://github.com/jesseduffield/lazydocker/releases/download/v0.23.3/lazydocker_0.23.3_Linux_x86_64.tar.gz
    #     tar -zxf lazydocker_0.23.3_Linux_x86_64.tar.gz
    #     mv lazydocker ~/.local/bin
    #   args:
    #     creates: ~/.local/bin/lazydocker 
    #   tags: lazydocker

    # - name: Install grpcurl
    #   ansible.builtin.shell: |
    #     TMP_DIR=$(mktemp -d)
    #     cd ${TMP_DIR}
    #     PACKAGE="grpcurl_1.9.1_linux_x86_64.tar.gz"
    #     curl -LO https://github.com/fullstorydev/grpcurl/releases/download/v1.9.1/$PACKAGE
    #     tar -zxf $PACKAGE
    #     mv grpcurl ~/.local/bin
    #   args:
    #     creates: ~/.local/bin/grpcurl 
    #   tags: grpcurl


    # - name: Setup tmux as default shell
    #   ansible.builtin.lineinfile:
    #     path: ~/.bashrc
    #     state: absent
    #     line: 'if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then exec tmux; fi'
    #   tags: env


    # - name: Install gprc dependencies
    #   ansible.builtin.package:
    #     name:
    #       - protobuf-compiler
    #       - libprotobuf-dev
    #     state: present
    #   become: true
    #   tags: grpc

    # CLEAN UP
    - name: Remove artifacts from bashrc
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^source ~/.local/share/blesh/ble.sh'
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup


    - name: Uninstall homebrew
      ansible.builtin.shell: |
        NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
      become: true
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup

    - name: Remove atuin
      ansible.builtin.shell: |
        rm -rf ~/.atuin
        rm -rf ~/.local/share/atuin
        rm -rf ~/.config/atuin
        rm -f ~/.bash-preexec.sh
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup

    - name: Remove bleh
      ansible.builtin.shell: |
        rm -rf ~/.local/share/blesh
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup

    - name: Remove artifacts from bashrc
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^source ~/.local/share/blesh/ble.sh'
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup

    - name: Remove artifacts from bashrc
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '.*atuin.*'
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup

    - name: Remove artifacts from bashrc
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '.*bash-preexec.*'
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup
