---
- name: setup linux development machine
  hosts: localhost

  roles:
  - role: danielrolls.nix
    become: yes

  tasks:
    - name: Install make
      ansible.builtin.package:
        name: make
        state: present
      become: yes
      tags: make

    - name: Install gcc
      ansible.builtin.package:
        name: gcc
        state: present
      become: yes
      tags: gcc

    - name: Install meld
      ansible.builtin.package:
        name: meld
        state: present
      become: yes
      tags: meld

    - name: Install tmux
      ansible.builtin.package:
        name: tmux
        state: present
      become: yes
      tags: tmux
      
    - name: Install bat
      ansible.builtin.package:
        name: bat
        state: present
      become: yes
      tags: bat

    # - name: Install oh-my-bash
    #   ansible.builtin.shell: bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)"
    #   args:  
    #     creates: ~/.oh-my-bash
    #   tags: oh-my-bash

    - name: Configure tmux
      ansible.builtin.shell: |
        git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
      args:  
        creates: ~/.tmux/plugins/tpm
      tags: tmux-config

    - name: Copy tmux config file
      ansible.builtin.copy:
        src: tmux.conf
        dest: ~/.tmux.conf
      tags: tmux-config
        
    - name: Install btop
      ansible.builtin.package:
        name: btop 
        state: present
      become: yes
      tags: btop
      
    - name: Install ble.sh
      ansible.builtin.shell: |
        curl -L https://github.com/akinomyoga/ble.sh/releases/download/nightly/ble-nightly.tar.xz | tar xJf -
        bash ble-nightly/ble.sh --install ~/.local/share
        echo 'source ~/.local/share/blesh/ble.sh' >> ~/.bashrc
        rm -rf ble-nightly
      args:  
        creates: ~/.local/share/blesh/ble.sh

    - name: Install atuin 
      ansible.builtin.shell: curl --proto '=https' --tlsv1.2 -sSf https://setup.atuin.sh | sh
      args:
        creates: ~/.atuin/bin/atuin
      tags: atuin

    # THIS ONLY WORKS AFTER ATUIN IS INITIALIZED
    - name: Configure atuin
      ansible.builtin.lineinfile:
        path: ~/.config/atuin/config.toml
        regexp: '^[#]?filter_mode_shell_up_key_binding'
        line: 'filter_mode_shell_up_key_binding = "directory"'
      tags: atuin

    - name: Configure atuin
      ansible.builtin.lineinfile:
        path: ~/.config/atuin/config.toml
        regexp: '^[#]?search_mode_shell_up_key_binding'
        line: 'search_mode_shell_up_key_binding = "prefix"'
      tags: atuin

    - name: Configure atuin
      ansible.builtin.lineinfile:
        path: ~/.config/atuin/config.toml
        regexp: '^[#]?style ='
        line: 'style = "auto"'
      tags: atuin

    - name: Configure atuin
      ansible.builtin.lineinfile:
        path: ~/.config/atuin/config.toml
        regexp: '^[#]?inline_height'
        line: 'inline_height = 20'
      tags: atuin

    - name: Install dasel
      ansible.builtin.shell: curl -sSLf "$(curl -sSLf https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_amd64 | grep -v .gz | cut -d\" -f 4)" -L -o dasel && chmod +x dasel && mv ./dasel /usr/local/bin/dasel
      args:
        creates: /usr/local/bin/dasel
      become: yes
      tags: dasel

    - name: Install rust
      ansible.builtin.shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        creates: ~/.cargo/bin/rustup
      tags: rust

    - name: Install ripgrep
      ansible.builtin.package:
        name: ripgrep
        state: present
      become: yes
      tags: ripgrep

    - name: Install neovim
      ansible.builtin.shell: |
        wget https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz
        wget https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz.sha256sum
        echo "$(cat nvim-linux64.tar.gz.sha256sum)" | sha256sum --check
        tar -zxvf nvim-linux64.tar.gz
        mv nvim-linux64 ~/.local/share/nvim
        rm nvim-linux64.tar.gz
        rm nvim-linux64.tar.gz.sha256sum
        echo 'export PATH=$HOME/.local/share/nvim/bin:$PATH' >> ~/.bashrc
      args:
        creates: ~/.local/share/nvim/bin/nvim
      tags: vim

    # THIS ONLY WORKS AFTER REFRESH THE SHELL
    - name: Install lvim
      ansible.builtin.shell: |
        which make
        which git
        which make
        which pip
        which npm
        which node
        which cargo
        which rg
        yes | curl -s https://raw.githubusercontent.com/LunarVim/LunarVim/release-1.4/neovim-0.9/utils/installer/install.sh |  LV_BRANCH=release-1.4/neovim-0.9 bash 
      args:
        creates: ~/.local/bin/lvim
      tags: lvim

    - name: Copy lvim config file
      ansible.builtin.copy:
        src: config.lua
        dest: ~/.config/lvim/config.lua
      tags: lvim-config

    - name: Uninstall lvim
      ansible.builtin.shell: bash ~/.local/share/lunarvim/lvim/utils/installer/uninstall.sh 
      when: "'cleanup-lvim' in ansible_run_tags"
      tags: cleanup-lvim

    - name: Install nerd fonts
      ansible.builtin.shell: |
        ./install_nerdfonts.sh
      args:
        creates: ~/.local/share/fonts/NerdFonts 
      tags: fonts

    - name: Install starship
      ansible.builtin.shell: |
         curl -sS https://starship.rs/install.sh | sh -s -- -b ~/.local/bin -y
         cp starship.toml ~/.config/starship.toml
         echo 'eval "$(starship init bash)"' >> ~/.bashrc
      args:
        creates: ~/.local/bin/starship 
      tags: starship

    - name: Install lazygit
      ansible.builtin.shell: |
        TMP_DIR=$(mktemp -d)
        cd ${TMP_DIR}
        curl -LO https://github.com/jesseduffield/lazygit/releases/download/v0.43.1/lazygit_0.43.1_Linux_x86_64.tar.gz
        tar -zxf lazygit_0.43.1_Linux_x86_64.tar.gz
        mv lazygit ~/.local/bin
      args:
        creates: ~/.local/bin/lazygit 
      tags: lazygit

    - name: Install lazydocker
      ansible.builtin.shell: |
        TMP_DIR=$(mktemp -d)
        cd ${TMP_DIR}
        curl -LO https://github.com/jesseduffield/lazydocker/releases/download/v0.23.3/lazydocker_0.23.3_Linux_x86_64.tar.gz
        tar -zxf lazydocker_0.23.3_Linux_x86_64.tar.gz
        mv lazydocker ~/.local/bin
      args:
        creates: ~/.local/bin/lazydocker 
      tags: lazydocker

    - name: Install kubectl and krew
      ansible.builtin.shell: |
        TMP_DIR=$(mktemp -d)
        cd ${TMP_DIR}
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
        install kubectl ~/.local/bin/kubectl
        ( set -x; cd "$(mktemp -d)" && \
          OS="$(uname | tr '[:upper:]' '[:lower:]')" && \
          ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" && \
          KREW="krew-${OS}_${ARCH}" && \
          curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" && \
          tar zxvf "${KREW}.tar.gz" && \
         ./"${KREW}" install krew \
        )
        echo 'export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"' >> ~/.bashrc
      args:
        creates: ~/.local/bin/kubectl 
      tags: kubernetes

    - name: Install kubectl plugins
      ansible.builtin.shell: |
        kubectl krew install ctx
        kubectl krew install ns
        kubectl krew install resource-capacity
        kubectl krew install view-secre
        kubectl krew install df-pv
      tags: kubernetes-plugins

    - name: Setup tmux as default shell
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        state: absent
        line: 'if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then exec tmux; fi'
      tags: env

    # CLEAN UP
    - name: Remove artifacts from bashrc
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^source ~/.local/share/blesh/ble.sh'
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup

    - name: Remove atuin
      ansible.builtin.shell: |
        rm -rf ~/.atuin
        rm -rf ~/.local/share/atuin
        rm -f ~/.bash-preexec.sh
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup

    - name: Remove bleh
      ansible.builtin.shell: |
        rm -rf ~/.local/share/blesh
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup

    - name: Remove artifacts from bashrc
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '^source ~/.local/share/blesh/ble.sh'
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup

    - name: Remove artifacts from bashrc
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '.*atuin.*'
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup

    - name: Remove artifacts from bashrc
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        state: absent
        regexp: '.*bash-preexec.*'
      when: "'cleanup' in ansible_run_tags"
      tags: cleanup
